// dijkstra算法.cpp : 此文件包含 "main" 函数。程序执行将在此处开始并结束。


#include <iostream>

#define X 6//图的元素个数
#define Y 6//图的联系
int graph[X][Y] = {//定义图，i行j列数据为第i个元素到第j个元素的距离，当其为自身或没有连接时为-1
    {-1,1,12,-1,-1,-1},
    {-1,-1,9,3,-1,-1},
    {-1,-1,-1,-1,5,-1},
    {-1,-1,4,-1,13,15},
    {-1,-1,-1,-1,-1,4},
    {-1,-1,-1,-1,-1,-1}
};


int main()
{
    //设置第一个点为起始点
    int* point_a = graph[0];
    int loc[6] = { -1 };//位置变量，因为第一个点为起点，所以第一个位置设为-1
    for (int i = 1; i < X; i++) {//双重循环遍历图中每一元素
        for (int j = 0; j < Y; j++) {
            if (graph[i][j] != -1) {//当两个元素之间有连接时进行下一步
                if (*(point_a +j) == -1) {// 当起点还未与当前遍历到的元素联通
                    *(point_a + j) = graph[i][j] + *(point_a + i);//将位置储存
                    loc[j] = i;//储存位置信息
                }
                else if(*(point_a +  j)>graph[i][j]+*(point_a+i)){//当起点到当前元素已有路径，但是该路径长度大于当前储存路径则修改路径长度为更小的
                    //更新经过该点的其他点位的长度
                    for (int k = i; k <Y; k++) {
                        if (loc[k] == j) {//当某个元素的上一个点位为当前需要修改的点位
                            *(point_a + k) -= *(point_a + j);//先变回该点到变化点的距离
                            *(point_a + k) += graph[i][j] + *(point_a + i);//再更新为找到的更小的长度
                        }
                  
                    }
                    //更新自己路径长度和位置
                    *(point_a + j) = graph[i][j] + *(point_a + i);
                    
                    loc[j] = i;
                    


                }
            }
        }
  
       

    }
    //输出起点到各点的最短距离及其路线
    for (int i = 1; i < Y; i++) { 
        std::cout << "起点到第" << i + 1 << "点的最小距离为" << *(point_a + i) << std::endl;
        int q = loc[i];//临时变量储存
        std::cout <<"路线为:" <<i+ 1;//为符合正常阅读从1开始故加一

        while (q > 0) {
            
            std::cout << "<-" << q + 1;//为符合正常阅读从1开始故加一
            q = loc[q];
        }
        std::cout << "<-" << 1 << std::endl;
    }

}

